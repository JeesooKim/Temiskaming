#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Temiskaming.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Temiskaming")]
	public partial class databaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertnavigation(navigation instance);
    partial void Updatenavigation(navigation instance);
    partial void Deletenavigation(navigation instance);
    partial void Insertjobapplication(jobapplication instance);
    partial void Updatejobapplication(jobapplication instance);
    partial void Deletejobapplication(jobapplication instance);
    partial void Insertjob(job instance);
    partial void Updatejob(job instance);
    partial void Deletejob(job instance);
    partial void Insertadmin(admin instance);
    partial void Updateadmin(admin instance);
    partial void Deleteadmin(admin instance);
    #endregion
		
		public databaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["TemiskamingConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public databaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<navigation> navigations
		{
			get
			{
				return this.GetTable<navigation>();
			}
		}
		
		public System.Data.Linq.Table<jobapplication> jobapplications
		{
			get
			{
				return this.GetTable<jobapplication>();
			}
		}
		
		public System.Data.Linq.Table<job> jobs
		{
			get
			{
				return this.GetTable<job>();
			}
		}
		
		public System.Data.Linq.Table<admin> admins
		{
			get
			{
				return this.GetTable<admin>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.navigation")]
	public partial class navigation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _viewpath;
		
		private string _controller;
		
		private string _group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnviewpathChanging(string value);
    partial void OnviewpathChanged();
    partial void OncontrollerChanging(string value);
    partial void OncontrollerChanged();
    partial void OngroupChanging(string value);
    partial void OngroupChanged();
    #endregion
		
		public navigation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_viewpath", DbType="VarChar(50)")]
		public string viewpath
		{
			get
			{
				return this._viewpath;
			}
			set
			{
				if ((this._viewpath != value))
				{
					this.OnviewpathChanging(value);
					this.SendPropertyChanging();
					this._viewpath = value;
					this.SendPropertyChanged("viewpath");
					this.OnviewpathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_controller", DbType="VarChar(50)")]
		public string controller
		{
			get
			{
				return this._controller;
			}
			set
			{
				if ((this._controller != value))
				{
					this.OncontrollerChanging(value);
					this.SendPropertyChanging();
					this._controller = value;
					this.SendPropertyChanged("controller");
					this.OncontrollerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[group]", Storage="_group", DbType="VarChar(50)")]
		public string group
		{
			get
			{
				return this._group;
			}
			set
			{
				if ((this._group != value))
				{
					this.OngroupChanging(value);
					this.SendPropertyChanging();
					this._group = value;
					this.SendPropertyChanged("group");
					this.OngroupChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.jobapplications")]
	public partial class jobapplication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _jobtitle;
		
		private string _aname;
		
		private string _aphone;
		
		private string _aemail;
		
		private string _aresume;
		
		private string _acoverletter;
		
		private string _anotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnjobtitleChanging(string value);
    partial void OnjobtitleChanged();
    partial void OnanameChanging(string value);
    partial void OnanameChanged();
    partial void OnaphoneChanging(string value);
    partial void OnaphoneChanged();
    partial void OnaemailChanging(string value);
    partial void OnaemailChanged();
    partial void OnaresumeChanging(string value);
    partial void OnaresumeChanged();
    partial void OnacoverletterChanging(string value);
    partial void OnacoverletterChanged();
    partial void OnanotesChanging(string value);
    partial void OnanotesChanged();
    #endregion
		
		public jobapplication()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobtitle", DbType="VarChar(MAX)")]
		public string jobtitle
		{
			get
			{
				return this._jobtitle;
			}
			set
			{
				if ((this._jobtitle != value))
				{
					this.OnjobtitleChanging(value);
					this.SendPropertyChanging();
					this._jobtitle = value;
					this.SendPropertyChanged("jobtitle");
					this.OnjobtitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aname", DbType="VarChar(MAX)")]
		public string aname
		{
			get
			{
				return this._aname;
			}
			set
			{
				if ((this._aname != value))
				{
					this.OnanameChanging(value);
					this.SendPropertyChanging();
					this._aname = value;
					this.SendPropertyChanged("aname");
					this.OnanameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aphone", DbType="VarChar(50)")]
		public string aphone
		{
			get
			{
				return this._aphone;
			}
			set
			{
				if ((this._aphone != value))
				{
					this.OnaphoneChanging(value);
					this.SendPropertyChanging();
					this._aphone = value;
					this.SendPropertyChanged("aphone");
					this.OnaphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aemail", DbType="VarChar(MAX)")]
		public string aemail
		{
			get
			{
				return this._aemail;
			}
			set
			{
				if ((this._aemail != value))
				{
					this.OnaemailChanging(value);
					this.SendPropertyChanging();
					this._aemail = value;
					this.SendPropertyChanged("aemail");
					this.OnaemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aresume", DbType="VarChar(MAX)")]
		public string aresume
		{
			get
			{
				return this._aresume;
			}
			set
			{
				if ((this._aresume != value))
				{
					this.OnaresumeChanging(value);
					this.SendPropertyChanging();
					this._aresume = value;
					this.SendPropertyChanged("aresume");
					this.OnaresumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_acoverletter", DbType="VarChar(MAX)")]
		public string acoverletter
		{
			get
			{
				return this._acoverletter;
			}
			set
			{
				if ((this._acoverletter != value))
				{
					this.OnacoverletterChanging(value);
					this.SendPropertyChanging();
					this._acoverletter = value;
					this.SendPropertyChanged("acoverletter");
					this.OnacoverletterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_anotes", DbType="VarChar(MAX)")]
		public string anotes
		{
			get
			{
				return this._anotes;
			}
			set
			{
				if ((this._anotes != value))
				{
					this.OnanotesChanging(value);
					this.SendPropertyChanging();
					this._anotes = value;
					this.SendPropertyChanged("anotes");
					this.OnanotesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.jobs")]
	public partial class job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _jobtitle;
		
		private string _jobdescr;
		
		private System.Nullable<System.DateTime> _posteddate;
		
		private string _qualifications;
		
		private string _duration;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnjobtitleChanging(string value);
    partial void OnjobtitleChanged();
    partial void OnjobdescrChanging(string value);
    partial void OnjobdescrChanged();
    partial void OnposteddateChanging(System.Nullable<System.DateTime> value);
    partial void OnposteddateChanged();
    partial void OnqualificationsChanging(string value);
    partial void OnqualificationsChanged();
    partial void OndurationChanging(string value);
    partial void OndurationChanged();
    #endregion
		
		public job()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobtitle", DbType="VarChar(50)")]
		public string jobtitle
		{
			get
			{
				return this._jobtitle;
			}
			set
			{
				if ((this._jobtitle != value))
				{
					this.OnjobtitleChanging(value);
					this.SendPropertyChanging();
					this._jobtitle = value;
					this.SendPropertyChanged("jobtitle");
					this.OnjobtitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_jobdescr", DbType="VarChar(MAX)")]
		public string jobdescr
		{
			get
			{
				return this._jobdescr;
			}
			set
			{
				if ((this._jobdescr != value))
				{
					this.OnjobdescrChanging(value);
					this.SendPropertyChanging();
					this._jobdescr = value;
					this.SendPropertyChanged("jobdescr");
					this.OnjobdescrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_posteddate", DbType="Date")]
		public System.Nullable<System.DateTime> posteddate
		{
			get
			{
				return this._posteddate;
			}
			set
			{
				if ((this._posteddate != value))
				{
					this.OnposteddateChanging(value);
					this.SendPropertyChanging();
					this._posteddate = value;
					this.SendPropertyChanged("posteddate");
					this.OnposteddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_qualifications", DbType="VarChar(MAX)")]
		public string qualifications
		{
			get
			{
				return this._qualifications;
			}
			set
			{
				if ((this._qualifications != value))
				{
					this.OnqualificationsChanging(value);
					this.SendPropertyChanging();
					this._qualifications = value;
					this.SendPropertyChanged("qualifications");
					this.OnqualificationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_duration", DbType="VarChar(MAX)")]
		public string duration
		{
			get
			{
				return this._duration;
			}
			set
			{
				if ((this._duration != value))
				{
					this.OndurationChanging(value);
					this.SendPropertyChanging();
					this._duration = value;
					this.SendPropertyChanged("duration");
					this.OndurationChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.admin")]
	public partial class admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _login;
		
		private string _pass;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnloginChanging(string value);
    partial void OnloginChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    #endregion
		
		public admin()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_login", DbType="VarChar(50)")]
		public string login
		{
			get
			{
				return this._login;
			}
			set
			{
				if ((this._login != value))
				{
					this.OnloginChanging(value);
					this.SendPropertyChanging();
					this._login = value;
					this.SendPropertyChanged("login");
					this.OnloginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="VarChar(20)")]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
